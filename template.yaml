AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Personal website with server-side rendering using Vike and React deployed with Lambda@Edge

Parameters:
  DeploymentTimestamp:
    Type: String
    Description: Timestamp for this deployment (used to generate unique Lambda versions)
    Default: '0000000000'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512

Resources:
  # Lambda@Edge function for SSR
  PersonalWebsiteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/server
      Handler: index.handler
      Runtime: nodejs22.x  # Using latest Node.js 22.x runtime
      Architectures:
        - x86_64
      # Lambda@Edge functions must be deployed to us-east-1
      # and referenced from CloudFront by version/alias
      # NOTE: Lambda@Edge functions cannot have environment variables
      Timeout: 5  # Lambda@Edge has a maximum timeout of 5 seconds for origin-request
      MemorySize: 1024  # Increased memory for better performance
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins:
            - '*'
          AllowMethods:
            - GET
            - POST
            - HEAD
          AllowHeaders:
            - '*'
      Role: !GetAtt PersonalWebsiteFunctionRole.Arn

  # IAM Role for the Lambda@Edge function
  PersonalWebsiteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
                - cloudfront.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: LambdaEdgeExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action: 
                  - 'lambda:GetFunction'
                  - 'lambda:EnableReplication*'
                  - 'iam:CreateServiceLinkedRole'
                  - 'cloudfront:UpdateDistribution'
                Resource: '*'

  # S3 bucket for CloudFront access logs
  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      VersioningConfiguration:
        Status: Suspended
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerPreferred
      LifecycleConfiguration:
        Rules:
          - Id: DeleteLogsAfter30Days
            Status: Enabled
            ExpirationInDays: 30
  
  # Log delivery permissions using a bucket ACL
  LoggingBucketBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Action: 
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${LoggingBucket}/*"
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 
              - s3:GetBucketAcl
              - s3:PutBucketAcl
            Resource: !Sub "arn:aws:s3:::${LoggingBucket}"

  # S3 bucket for static assets
  StaticAssets:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  # Bucket policy to allow public reading of static assets
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssets
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "${StaticAssets.Arn}/*"
            Principal: "*"

  # CloudFront distribution that uses Lambda@Edge
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Static
            DomainName: !GetAtt StaticAssets.DomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        Logging:
          Bucket: !GetAtt LoggingBucket.DomainName
          Prefix: 'cloudfront-logs/'
          IncludeCookies: false
        DefaultCacheBehavior:
          TargetOriginId: S3Static
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Host
              - Origin
              - Referer
              - User-Agent
          Compress: true
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref PersonalWebsiteFunctionVersion
        CacheBehaviors:
          - PathPattern: "/assets/*"
            TargetOriginId: S3Static
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            Compress: true
            DefaultTTL: 31536000  # 1 year
            MinTTL: 31536000
            MaxTTL: 31536000
        DefaultRootObject: ""
        PriceClass: PriceClass_100
        HttpVersion: http2
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # Get a specific version of the Lambda function to use in CloudFront
  PersonalWebsiteFunctionVersion:
    Type: AWS::Lambda::Version
    Properties:
      FunctionName: !Ref PersonalWebsiteFunction
      Description: !Sub "Version for Lambda@Edge deployed on ${AWS::StackName}-${AWS::Region}-${AWS::AccountId}-${DeploymentTimestamp}"
      # The Description with Timestamp ensures each deployment creates a new unique version ID


Outputs:
  PersonalWebsiteFunction:
    Description: "Personal Website Lambda Function ARN"
    Value: !GetAtt PersonalWebsiteFunction.Arn
  PersonalWebsiteFunctionVersion:
    Description: "Personal Website Lambda Function Version ARN for Lambda@Edge"
    Value: !Ref PersonalWebsiteFunctionVersion
  CloudFrontDistributionDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  StaticAssetsS3BucketName:
    Description: "S3 Bucket for Static Assets"
    Value: !Ref StaticAssets