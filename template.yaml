AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Personal website with server-side rendering using Vike and React deployed with API Gateway and Lambda

Parameters:
  Environment:
    Type: String
    Description: Environment to deploy to (dev, staging, prod)
    Default: 'prod'
    AllowedValues:
      - dev
      - staging
      - prod
  SiteDomain:
    Type: String
    Description: Custom domain for the website (e.g., example.com)
    Default: 'johnmollberg.com'
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID
    Default: 'Z2P8S248LOC4KP'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512

Resources:
  # Lambda function for SSR with Function URL
  PersonalWebsiteFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./dist/server
      Handler: index.handler
      Runtime: nodejs22.x
      FunctionName: !Sub "personal-website-${Environment}-ssr"
      Architectures:
        - x86_64
      Timeout: 30
      MemorySize: 1024
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          SITE_DOMAIN: !Ref SiteDomain
      Role: !GetAtt PersonalWebsiteFunctionRole.Arn
      FunctionUrlConfig:
        AuthType: NONE
        Cors:
          AllowOrigins:
            - "*"
          AllowMethods:
            - GET
          AllowHeaders:
            - "*"
          MaxAge: 3600

  # IAM Role for the Lambda function
  PersonalWebsiteFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                Resource: 
                  - !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Environment}/statsig-server-secret-??????'
              - Effect: Allow
                Action: 
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${StaticAssets}/*'
                  - !Sub 'arn:aws:s3:::${StaticAssets}'
              # Removed unused CloudFront logging permissions
              # Removed unused Kinesis CloudFront logs permissions

  # S3 bucket for static assets
  StaticAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "personal-website-assets-${Environment}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter

  # Bucket policy to allow public reading of static assets
  StaticAssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticAssets
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Resource: !Sub "${StaticAssets.Arn}/*"
            Principal: "*"

  # CloudFront Origin Request Policy for API Gateway
  CloudFrontLambdaFunctionUrlOriginRequestPolicy:
    Type: AWS::CloudFront::OriginRequestPolicy
    Properties: 
      OriginRequestPolicyConfig:
        Name: !Sub "LambdaFunctionUrlPolicy-${Environment}"
        Comment: "Policy for forwarding all request headers to Lambda Function URL"
        HeadersConfig: 
          HeaderBehavior: allExcept
          Headers:
            - "Host"
        CookiesConfig: 
          CookieBehavior: all
        QueryStringsConfig: 
          QueryStringBehavior: all
  
  # CloudFront IAM Role for Lambda Function URL access
  CloudFrontLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaFunctionUrlAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunctionUrl
                Resource: !GetAtt PersonalWebsiteFunction.Arn
      Path: /service-role/

  # CloudFront distribution that uses Lambda Function URL and S3
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: Environment
          Value: !Ref Environment
      DistributionConfig:
        Origins:
          - Id: LambdaFunctionUrl
            DomainName: !Select [0, !Split ["/", !Select [1, !Split ["//", !GetAtt PersonalWebsiteFunctionUrl.FunctionUrl]]]]
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            OriginCustomHeaders:
              - HeaderName: X-Forwarded-Host
                HeaderValue: !Ref SiteDomain
          - Id: S3Static
            DomainName: !GetAtt StaticAssets.DomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: LambdaFunctionUrl
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          CachedMethods: [GET, HEAD]
          OriginRequestPolicyId: !Ref CloudFrontLambdaFunctionUrlOriginRequestPolicy
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Host
              - Origin
              - Referer
              - User-Agent
          Compress: true
          DefaultTTL: 0
          MinTTL: 0
          MaxTTL: 0
        CacheBehaviors:
          - PathPattern: "/assets/*"
            TargetOriginId: S3Static
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            Compress: true
            DefaultTTL: 31536000  # 1 year
            MinTTL: 31536000
            MaxTTL: 31536000
          - PathPattern: "/favicon.ico"
            TargetOriginId: S3Static
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            CachedMethods: [GET, HEAD]
            ForwardedValues:
              QueryString: false
              Cookies:
                Forward: none
            Compress: true
            DefaultTTL: 86400  # 1 day
            MinTTL: 86400
            MaxTTL: 86400
        DefaultRootObject: ""
        PriceClass: PriceClass_100
        HttpVersion: http2
        Aliases:
          - !Ref SiteDomain
        ViewerCertificate:
          AcmCertificateArn: !Ref SiteCertificate
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
  
  LambdaFunctionUrlPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref PersonalWebsiteFunction
      Action: lambda:InvokeFunctionUrl
      Principal: "*"
      FunctionUrlAuthType: NONE

  # ACM Certificate with automatic DNS validation
  SiteCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref SiteDomain
      SubjectAlternativeNames:
        - !Ref SiteDomain
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref SiteDomain
          HostedZoneId: !Ref HostedZoneId
      Tags:
        - Key: Environment
          Value: !Ref Environment
        - Key: Name
          Value: !Sub "${SiteDomain} Certificate"
        
  # Route 53 record to point domain to CloudFront
  Route53CloudFrontRecord:
    Type: AWS::Route53::RecordSet
    DependsOn: CloudFrontDistribution
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref SiteDomain
      Type: A
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2 # CloudFront's hosted zone ID (constant value)

Outputs:
  CloudFrontDistributionDomainName:
    Description: "CloudFront Distribution Domain Name"
    Value: !GetAtt CloudFrontDistribution.DomainName
  StaticAssetsS3BucketName:
    Description: "S3 Bucket for Static Assets"
    Value: !Ref StaticAssets
